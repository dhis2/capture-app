import type { FetchError } from '@dhis2/app-runtime';
import { dataElementTypes } from '../../metaData';

export { FetchError };

export type QueryRefetchFunction = (options?: { [key: string]: any }) => Promise<any>;

export type EventReducerProps = {
    enrollments?: Array<object> | null;
    events: Array<ApiEnrollmentEvent>;
}

export type EnrollmentType = {
    enrolledAt?: string;
    occurredAt?: string;
    followUp?: boolean;
    status?: string;
    updatedAt?: string;
    orgUnit?: string;
    geometry?: {
        type?: string;
        coordinates?: Array<any>;
    };
    [key: string]: any;
};

export type ProgramType = {
    displayEnrollmentDateLabel?: string;
    displayIncidentDateLabel?: string;
    displayIncidentDate?: boolean;
    selectEnrollmentDatesInFuture?: boolean;
    selectIncidentDatesInFuture?: boolean;
    onlyEnrollOnce?: boolean;
    trackedEntityType?: {
        displayName?: string;
        access?: {
            data?: {
                write?: boolean;
            };
        };
    };
    programStages?: Array<{
        name?: string;
        id?: string;
        autoGenerateEvent?: boolean;
        access?: {
            data?: {
                write?: boolean;
            };
        };
    }>;
    access?: {
        data?: {
            write?: boolean;
        };
    };
    [key: string]: any;
};

export type OwnerOrgUnitType = {
    id?: string;
    [key: string]: any;
};

export type Props = {
    teiId: string;
    enrollmentId: string;
    programId: string;
    readOnlyMode?: boolean;
    externalData: { status: { value: string | null }; events?: Array<object> | null };
    onDelete: () => void;
    onAddNew: () => void;
    onUpdateEnrollmentDate?: (enrollmentDate: string) => void;
    onUpdateIncidentDate?: (enrollmentDate: string) => void;
    onError?: (message: string) => void;
    onSuccess?: () => void;
    onUpdateEnrollmentStatus?: (enrollment: object) => void;
    onUpdateEnrollmentStatusSuccess?: ({ redirect }: { redirect?: boolean }) => void;
    onUpdateEnrollmentStatusError?: (message: string) => void;
    onAccessLostFromTransfer?: () => void;
};

export type PlainProps = {
    enrollment: EnrollmentType;
    events: Array<ApiEnrollmentEvent>;
    program: ProgramType;
    ownerOrgUnit: OwnerOrgUnitType;
    locale: string;
    refetchEnrollment: QueryRefetchFunction;
    refetchTEI: QueryRefetchFunction;
    initError?: FetchError;
    loading: boolean;
    canAddNew: boolean;
    editDateEnabled: boolean;
    displayAutoGeneratedEventWarning: boolean;
    updateEnrollmentDate: (enrollmentDate: string) => void;
    updateIncidentDate: (incidentDate: string) => void;
    onDelete: () => void;
    onAddNew: () => void;
    onError?: (message: string) => void;
    onSuccess?: () => void;
    onUpdateEnrollmentStatus?: (enrollment: object) => void;
    onUpdateEnrollmentStatusSuccess?: ({ redirect }: { redirect?: boolean }) => void;
    onUpdateEnrollmentStatusError?: (message: string) => void;
    onAccessLostFromTransfer?: () => void;
    type?: string;
} & CssClasses;

export type ApiEnrollmentEvent = {
    status: string;
    event: string;
    programStage: string;
};

export type CssClasses = {
    classes: {
        [key: string]: string;
    };
};
