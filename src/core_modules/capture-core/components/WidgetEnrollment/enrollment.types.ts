import type { FetchError } from '@dhis2/app-runtime';

export type QueryRefetchFunction = (options?: { [key: string]: any }) => Promise<any>;

export type ApiDataValue = {
    dataElement: string;
    value: string;
};

export type ApiEnrollmentEvent = {
    enrollment: string;
    event: string;
    program: string;
    programStage: string;
    orgUnit: string;
    trackedEntity: string;
    enrollmentStatus: string;
    status: 'ACTIVE' | 'VISITED' | 'COMPLETED' | 'SCHEDULE' | 'OVERDUE' | 'SKIPPED';
    occurredAt: string;
    scheduledAt: string;
    updatedAt: string;
    dataValues: Array<ApiDataValue>;
    notes?: Array<Object>;
    deleted?: boolean;
    pendingApiResponse?: boolean | null;
    assignedUser?: {
        uid: string;
        username: string;
        displayName?: string;
        firstName: string;
        surname: string;
    };
    followUp?: boolean;
};

export type EventReducerProps = {
    enrollments?: Array<Object> | null;
    events: Array<ApiEnrollmentEvent>;
};

export type Props = {
    teiId: string;
    enrollmentId: string;
    programId: string;
    readOnlyMode?: boolean;
    externalData: { status: { value: string | null }, events?: Array<Object> | null };
    onDelete: () => void;
    onAddNew: () => void;
    onUpdateEnrollmentDate?: (enrollmentDate: string) => void;
    onUpdateIncidentDate?: (enrollmentDate: string) => void;
    onError?: (message: string) => void;
    onSuccess?: () => void;
    onUpdateEnrollmentStatus?: (enrollment: Object) => void;
    onUpdateEnrollmentStatusSuccess?: (options: { redirect?: boolean }) => void;
    onUpdateEnrollmentStatusError?: (message: string) => void;
    onAccessLostFromTransfer?: () => void;
};

export type PlainProps = {
    enrollment: Object;
    events: Array<{ status: string, event: string, programStage: string }>;
    program: Object;
    ownerOrgUnit: Object;
    locale: string;
    refetchEnrollment: QueryRefetchFunction;
    refetchTEI: QueryRefetchFunction;
    initError?: FetchError;
    loading: boolean;
    canAddNew: boolean;
    editDateEnabled: boolean;
    displayAutoGeneratedEventWarning: boolean;
    updateEnrollmentDate: (enrollmentDate: string) => void;
    updateIncidentDate: (incidentDate: string) => void;
    onDelete: () => void;
    onAddNew: () => void;
    onError?: (message: string) => void;
    onSuccess?: () => void;
    onUpdateEnrollmentStatus?: (enrollment: Object) => void;
    onUpdateEnrollmentStatusSuccess?: (options: { redirect?: boolean }) => void;
    onUpdateEnrollmentStatusError?: (message: string) => void;
    onAccessLostFromTransfer?: () => void;
    type?: string;
    classes: {
        [key: string]: string;
    };
};
