// @flow
import React, { useState, useCallback } from 'react';
import moment from 'moment';
import {
    Button,
    CalendarInput,
    IconCalendar16,
    IconEdit16,
    colors,
    spacersNum,
} from '@dhis2/ui';
import i18n from '@dhis2/d2-i18n';
import { withStyles } from '@material-ui/core';
import { convertValue as convertValueClientToView } from '../../../converters/clientToView';
import { dataElementTypes } from '../../../metaData';

type Props = {
    date: string,
    dateLabel: string,
    locale: string,
    editEnabled: boolean,
    displayAutoGeneratedEventWarning: boolean,
    onSave: (string) => void,
    ...CssClasses,
}

const styles = {
    editButton: {
        display: 'inline-flex',
        alignItems: 'center',
        justifyContent: 'center',
        flexShrink: 0,
        cursor: 'pointer',
        border: 'none',
        borderRadius: '3px',
        background: 'transparent',
        color: colors.grey600,
        padding: 0,
        marginLeft: '2px',
        '&:focus': {
            outline: 'none',
            background: colors.grey200,
            color: colors.grey800,
        },
        '&:hover': {
            background: colors.grey200,
            color: colors.grey800,
        },
    },
    calendar: {
        paddingTop: '6px',
    },
    inputField: {
        maxWidth: '200px',
    },
    buttonStrip: {
        display: 'flex',
        gap: `${spacersNum.dp4}px`,
        margin: `${spacersNum.dp4}px 0`,
    },
    note: {
        fontSize: '12px',
        color: colors.grey700,
    },
};

const DateComponentPlain = ({
    date,
    dateLabel,
    locale,
    editEnabled,
    displayAutoGeneratedEventWarning,
    onSave,
    classes,
}: Props) => {
    const [editMode, setEditMode] = useState(false);
    const [selectedDate, setSelectedDate] = useState();
    const dateChangeHandler = useCallback(({ calendarDateString }) => {
        setSelectedDate(calendarDateString);
    }, [setSelectedDate]);
    const displayDate = String(convertValueClientToView(date, dataElementTypes.DATE));

    const onOpenEdit = () => {
        // CalendarInput component only supports the YYYY-MM-DD format
        setSelectedDate(moment(date).format('YYYY-MM-DD'));
        setEditMode(true);
    };
    const saveHandler = () => {
        // CalendarInput component only supports the YYYY-MM-DD format
        if (selectedDate) {
            const newDate = moment.utc(selectedDate, 'YYYY-MM-DD').format('YYYY-MM-DDTHH:mm:ss.SSS');
            if (newDate !== date) {
                onSave(newDate);
            }
        }
        setEditMode(false);
    };

    return editMode ? (
        <div data-test="widget-enrollment-date">
            <div className={classes.inputField}>
                <CalendarInput
                    calendar="gregory"
                    dense
                    className={classes.calendar}
                    label={dateLabel}
                    date={selectedDate}
                    locale={locale}
                    onDateSelect={dateChangeHandler}
                />
            </div>
            <div className={classes.buttonStrip}>
                <Button
                    primary
                    small
                    onClick={saveHandler}
                >
                    {i18n.t('Save')}
                </Button>
                <Button
                    secondary
                    small
                    onClick={() => setEditMode(false)}
                >
                    {i18n.t('Cancel')}
                </Button>
            </div>
            {displayAutoGeneratedEventWarning && (
                <div className={classes.note}>
                    {i18n.t('Existing dates for auto-generated events will not be updated.')}
                </div>
            )}
        </div>
    ) : (
        <div className={classes.row} data-test="widget-enrollment-date">
            <span data-test="widget-enrollment-icon-calendar">
                <IconCalendar16 color={colors.grey600} />
            </span>
            {dateLabel}{': '}
            {displayDate}
            {editEnabled &&
                <button
                    className={classes.editButton}
                    data-test="widget-enrollment-icon-edit-date"
                    onClick={onOpenEdit}
                >
                    <IconEdit16 />
                </button>
            }
        </div>
    );
};

export const Date = withStyles(styles)(DateComponentPlain);
