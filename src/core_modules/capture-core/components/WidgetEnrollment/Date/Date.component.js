// @flow
import React, { useState, useCallback } from 'react';
import { DateField } from 'capture-core/components/FormFields/New';
import {
    Button,
    IconCalendar16,
    IconEdit16,
    colors,
    spacersNum,
} from '@dhis2/ui';
import i18n from '@dhis2/d2-i18n';
import { systemSettingsStore } from '../../../metaDataMemoryStores';
import { convertValue as convertValueClientToView } from '../../../converters/clientToView';
import { convertValue as convertValueFormToClient } from '../../../converters/formToClient';
import { convertValue as convertValueClientToServer } from '../../../converters/clientToServer';
import { dataElementTypes } from '../../../metaData';
import { theme } from '../../../../../styles/theme';


type Props = {
    date: string,
    dateLabel: string,
    locale: string,
    editEnabled: boolean,
    displayAutoGeneratedEventWarning: boolean,
    onSave: (string) => void,
}

export const Date = ({
    date,
    dateLabel,
    locale,
    editEnabled,
    displayAutoGeneratedEventWarning,
    onSave,
}: Props) => {
    const [editMode, setEditMode] = useState(false);
    const [selectedDate, setSelectedDate] = useState();
    const [validation, setValidation] = useState();

    const dateChangeHandler = useCallback((dateString, internalComponentError) => {
        setSelectedDate(dateString);
        setValidation(internalComponentError);
    }, [setSelectedDate]);
    const displayDate = String(convertValueClientToView(date, dataElementTypes.DATE));

    const onOpenEdit = () => {
        setSelectedDate(String(convertValueClientToView(date, dataElementTypes.DATE)));
        setEditMode(true);
    };
    const saveHandler = () => {
        if (selectedDate) {
            const newClientDate = convertValueFormToClient(selectedDate, dataElementTypes.DATE);
            const newDate = convertValueClientToServer(newClientDate, dataElementTypes.DATE);
            if (typeof newDate === 'string' && newDate !== date) {
                onSave(newDate);
            }
        }
        setEditMode(false);
    };

    return editMode ? (
        <div data-test="widget-enrollment-date">
            <div className="input-field">
                <DateField
                    width={200}
                    value={selectedDate}
                    onBlur={dateChangeHandler}
                    label={dateLabel}
                    dense
                    locale={locale}
                    calendarType={systemSettingsStore.get().calendar}
                    dateFormat={systemSettingsStore.get().dateFormat}
                />
                <div className="error">
                    {validation && validation.error ? i18n.t('Please provide a valid date') : ''}
                </div>
            </div>
            <div className="button-strip">
                <Button
                    primary
                    small
                    onClick={saveHandler}
                    disabled={!!validation?.error}
                >
                    {i18n.t('Save')}
                </Button>
                <Button
                    secondary
                    small
                    onClick={() => setEditMode(false)}
                >
                    {i18n.t('Cancel')}
                </Button>
            </div>
            {displayAutoGeneratedEventWarning && (
                <div className="note">
                    {i18n.t('Existing dates for auto-generated events will not be updated.')}
                </div>
            )}

            <style jsx>{`
                .input-field {
                    max-width: 200px;
                }
                .button-strip {
                    display: flex;
                    gap: ${spacersNum.dp4}px;
                    margin: ${spacersNum.dp4}px 0;
                }
                .note {
                    font-size: 12px;
                    color: ${colors.grey700};
                }
                .error {
                    font-family: ${theme.typography.fontFamily};
                    font-weight: ${theme.typography.caption.fontWeight};
                    font-size: ${theme.typography.caption.fontSize};
                    line-height: ${theme.typography.caption.lineHeight};
                    letter-spacing: ${theme.typography.caption.letterSpacing};
                    color: ${theme.palette.error.main};
                }
            `}</style>
        </div>
    ) : (
        <div className="row" data-test="widget-enrollment-date">
            <span data-test="widget-enrollment-icon-calendar">
                <IconCalendar16 color={colors.grey600} />
            </span>
            {dateLabel}{': '}
            {displayDate}
            {editEnabled &&
                <button
                    className="edit-button"
                    data-test="widget-enrollment-icon-edit-date"
                    onClick={onOpenEdit}
                >
                    <IconEdit16 />
                </button>
            }

            <style jsx>{`
             .row {
                    display: flex;
                    align-items: center;
                    margin: ${spacersNum.dp8}px 0;
                    font-size: 14px;
                    color: ${colors.grey900};
                    gap: ${spacersNum.dp4}px;
                }
                .edit-button {
                    display: inline-flex;
                    align-items: center;
                    justify-content: center;
                    flex-shrink: 0;
                    cursor: pointer;
                    border: none;
                    border-radius: 3px;
                    background: transparent;
                    color: ${colors.grey600};
                    padding: 0;
                    margin-left: 2px;
                }
                .edit-button:focus {
                    outline: none;
                    background: ${colors.grey200};
                    color: ${colors.grey800};
                }
                .edit-button:hover {
                    background: ${colors.grey200};
                    color: ${colors.grey800};
                }
                .calendar {
                    padding-top: 6px;
                }
            `}</style>
        </div>
    );
};
