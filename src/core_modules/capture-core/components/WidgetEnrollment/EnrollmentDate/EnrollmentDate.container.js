// @flow
import React from 'react';
import { useDataMutation } from '@dhis2/app-runtime';
import { EnrollmentDateComponent } from './EnrollmentDate.component';
import { convertValue as convertValueServerToClient } from '../../../converters/serverToClient';
import { dataElementTypes } from '../../../metaData';
import { processErrorReports } from '../processErrorReports';

type Props = {
    serverDate: string,
    enrollmentDateLabel: string,
    editEnabled: boolean,
    displayAutoGeneratedEventWarning: boolean,
    updateDate: ({
        date: string,
        updateMutation?: (enrollment: any) => void,
    }) => void,
    onSuccess: () => any,
    onError?: (errorReport: any) => void,
    ...CssClasses,
}

const enrollmentUpdate = {
    resource: 'tracker?async=false&importStrategy=UPDATE',
    type: 'create',
    data: enrollment => ({
        enrollments: [enrollment],
    }),
};

export const EnrollmentDate = ({
    serverDate,
    enrollmentDateLabel,
    editEnabled,
    displayAutoGeneratedEventWarning,
    updateDate,
    onSuccess,
    onError,
    classes,
}: Props) => {
    const enrollmentDate = String(convertValueServerToClient(serverDate, dataElementTypes.DATE));

    const [updateMutation] = useDataMutation(enrollmentUpdate, {
        onComplete: () => {
            onSuccess && onSuccess();
        },
        onError: (e) => {
            updateDate({ date: serverDate });
            onError && onError(processErrorReports(e));
        },
    });

    const saveHandler = (date: string) => {
        updateDate({
            date,
            updateMutation,
        });
    };

    return (<EnrollmentDateComponent
        enrollmentDateLabel={enrollmentDateLabel}
        enrollmentDate={enrollmentDate}
        editEnabled={editEnabled}
        displayAutoGeneratedEventWarning={displayAutoGeneratedEventWarning}
        onSave={saveHandler}
        classes={classes}
    />);
};
