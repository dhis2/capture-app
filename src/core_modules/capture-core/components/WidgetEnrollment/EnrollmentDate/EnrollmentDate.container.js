// @flow
import React, { useState, useEffect } from 'react';
import { useDataMutation } from '@dhis2/app-runtime';
import { EnrollmentDateComponent } from './EnrollmentDate.component';
import { convertValue as convertValueServerToClient } from '../../../converters/serverToClient';
import { convertValue as convertValueClientToServer } from '../../../converters/clientToServer';
import { dataElementTypes } from '../../../metaData';
import { processErrorReports } from '../processErrorReports';

type Props = {
    serverDate: string,
    enrollmentDateLabel: string,
    editEnabled: boolean,
    displayAutoGeneratedEventWarning: boolean,
    createPayload: (date: string) => any,
    onUpdateDate?: (enrollmentDate: string) => void,
    onError?: (errorReport: any) => void,
    ...CssClasses,
}

const enrollmentUpdate = {
    resource: 'tracker?async=false&importStrategy=UPDATE',
    type: 'create',
    data: enrollment => ({
        enrollments: [enrollment],
    }),
};

export const EnrollmentDate = ({
    serverDate,
    enrollmentDateLabel,
    editEnabled,
    displayAutoGeneratedEventWarning,
    createPayload,
    onUpdateDate,
    onError,
    classes,
}: Props) => {
    const [enrollmentDate, setEnrollmentDate] = useState(String(convertValueServerToClient(serverDate, dataElementTypes.DATE)));
    const [newEnrollmentDate, setNewEnrollmentDate] = useState(enrollmentDate);

    const [updateMutation, { loading }] = useDataMutation(enrollmentUpdate, {
        onComplete: () => {
            setEnrollmentDate(newEnrollmentDate);
            onUpdateDate && onUpdateDate(newEnrollmentDate);
        },
        onError: (e) => {
            setNewEnrollmentDate(enrollmentDate);
            onError && onError(processErrorReports(e));
        },
    });

    const saveHandler = (selectedDate: string) => {
        setNewEnrollmentDate(selectedDate);
    };

    useEffect(() => {
        if (newEnrollmentDate !== enrollmentDate && !loading) {
            updateMutation(createPayload(String(convertValueClientToServer(newEnrollmentDate, dataElementTypes.DATE))));
        }
    }, [newEnrollmentDate, enrollmentDate, updateMutation, createPayload, loading]);

    return (<EnrollmentDateComponent
        enrollmentDateLabel={enrollmentDateLabel}
        enrollmentDate={enrollmentDate}
        editEnabled={editEnabled}
        displayAutoGeneratedEventWarning={displayAutoGeneratedEventWarning}
        saveInProgress={enrollmentDate !== newEnrollmentDate}
        onSave={saveHandler}
        classes={classes}
    />);
};
