import React, { useMemo } from 'react';
import { errorCreator } from 'capture-core-utils';
import log from 'loglevel';
import { WidgetEnrollment as WidgetEnrollmentNote } from './WidgetEnrollment.component';
import { useOrgUnitNameWithAncestors } from '../../metadataRetrieval/orgUnitName';
import { useTrackedEntityInstances } from './hooks/useTrackedEntityInstances';
import { useEnrollment } from './hooks/useEnrollment';
import { useProgram } from './hooks/useProgram';
import { useUserLocale } from '../../utils/localeData/useUserLocale';
import type { Props, EnrollmentType, ProgramType, FetchError } from './enrollment.types';
import { plainStatus } from './constants/status.const';

const useError = (
    errorEnrollment?: FetchError | null, 
    errorProgram?: FetchError | null, 
    errorOwnerOrgUnit?: FetchError | null, 
    errorOrgUnit?: FetchError | null, 
    errorLocale?: FetchError | null
): FetchError | null | undefined =>
    useMemo(
        () => errorEnrollment || errorProgram || errorOwnerOrgUnit || errorOrgUnit || errorLocale,
        [errorEnrollment, errorProgram, errorOwnerOrgUnit, errorOrgUnit, errorLocale],
    );

const useContainsAutoGeneratedEvent = (program?: ProgramType): boolean =>
    useMemo(() => 
        !!program && 
        !!program.programStages && 
        program.programStages.some(({ autoGenerateEvent }) => !!autoGenerateEvent), 
        [program]
    );

const useCanAddNew = (
    enrollments: Array<any>, 
    programId: string, 
    tetAccess?: { data?: { write?: boolean } }
): boolean =>
    useMemo(
        () => !!tetAccess?.data?.write &&
            enrollments
                .filter(item => item.program === programId)
                .every(item => item.status !== plainStatus.ACTIVE),
        [enrollments, programId, tetAccess],
    );

const useEnrollmentEvents = (externalData: { events?: Array<any> | null }): Array<any> => 
    useMemo(() => externalData.events || [], [externalData]);

export const WidgetEnrollment = ({
    externalData,
    teiId,
    enrollmentId,
    programId,
    readOnlyMode = false,
    onDelete,
    onAddNew,
    onUpdateEnrollmentDate,
    onUpdateIncidentDate,
    onError,
    onSuccess,
    onUpdateEnrollmentStatus,
    onUpdateEnrollmentStatusError,
    onUpdateEnrollmentStatusSuccess,
    onAccessLostFromTransfer,
}: Props) => {
    const {
        enrollment,
        updateEnrollmentDate,
        updateIncidentDate,
        error: errorEnrollment,
        refetch: refetchEnrollment,
    } = useEnrollment({
        enrollmentId,
        onUpdateEnrollmentDate,
        onUpdateIncidentDate,
        onError,
        externalData,
    });
    const { error: errorProgram, program } = useProgram(programId);
    const {
        error: errorOwnerOrgUnit,
        ownerOrgUnit,
        enrollments,
        refetch: refetchTEI,
    } = useTrackedEntityInstances(teiId, programId);
    const { error: errorOrgUnit, displayName } = useOrgUnitNameWithAncestors(
        typeof ownerOrgUnit === 'string' ? ownerOrgUnit : null,
    );
    const { error: errorLocale, locale } = useUserLocale();
    const canAddNew = useCanAddNew(enrollments, programId, program?.trackedEntityType?.access);
    const containsAutoGeneratedEvent = useContainsAutoGeneratedEvent(program);
    const error = useError(errorEnrollment, errorProgram, errorOwnerOrgUnit, errorOrgUnit, errorLocale);
    const events = useEnrollmentEvents(externalData);

    if (error) {
        log.error(errorCreator('Enrollment widget could not be loaded')({ error }));
    }

    return (
        <WidgetEnrollmentNote
            enrollment={enrollment || {}}
            events={events}
            canAddNew={!!canAddNew}
            editDateEnabled={!readOnlyMode && !!program && !!program.access?.data?.write}
            displayAutoGeneratedEventWarning={!!containsAutoGeneratedEvent}
            program={program || {}}
            refetchEnrollment={refetchEnrollment}
            refetchTEI={refetchTEI}
            ownerOrgUnit={{ id: ownerOrgUnit, displayName }}
            locale={locale || ''}
            loading={!(enrollment && program && displayName && locale)}
            onDelete={onDelete}
            onAddNew={onAddNew}
            updateEnrollmentDate={updateEnrollmentDate}
            updateIncidentDate={updateIncidentDate}
            initError={error as FetchError | undefined}
            onError={onError}
            onSuccess={onSuccess}
            onUpdateEnrollmentStatus={onUpdateEnrollmentStatus}
            onUpdateEnrollmentStatusSuccess={onUpdateEnrollmentStatusSuccess}
            onUpdateEnrollmentStatusError={onUpdateEnrollmentStatusError}
            onAccessLostFromTransfer={onAccessLostFromTransfer}
            classes={{}}
        />
    );
};
