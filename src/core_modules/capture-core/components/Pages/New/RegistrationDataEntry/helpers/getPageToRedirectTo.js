// @flow
import { ProgramStage } from '../../../../../metaData';

export const PAGES = {
    enrollmentEventNew: 'enrollmentEventNew',
    enrollmentEventEdit: 'enrollmentEventEdit',
    enrollmentDashboard: 'enrollmentDashboard',
};
/**
 * An event can be
 *   - created during first stage registration
 *   - created and linked during first stage registration
 *   - autogenerated
 * When the event will be created redirect to enrollmentEventEdit
 * When the event will not be created redirect to enrollmentEventNew
 */
export const getPageToRedirectTo = ({
    stages,
    events,
    useFirstStageDuringRegistration,
    relatedStageLinkedEvent,
}: {
    stages: Map<string, ProgramStage>,
    events: any,
    useFirstStageDuringRegistration: boolean,
    relatedStageLinkedEvent?: {
        programStageId: string,
        eventId: string,
    },
}): { stageId?: string, eventId?: string, pageToRedirectTo: string } => {
    const stagesArray = [...stages.values()];
    const [firstStageWithOpenAfterEnrollment] = stagesArray.filter(({ openAfterEnrollment }) => openAfterEnrollment);

    // event will be created and linked during first stage registration
    if (relatedStageLinkedEvent?.eventId) {
        const { programStageId, eventId } = relatedStageLinkedEvent;
        return {
            stageId: programStageId,
            eventId,
            pageToRedirectTo: PAGES.enrollmentEventEdit,
        };
    }

    if (firstStageWithOpenAfterEnrollment) {
        // event will be created during first stage registration
        if (useFirstStageDuringRegistration && stagesArray[0].id === firstStageWithOpenAfterEnrollment.id) {
            const eventId = events.find(e => e.programStage === firstStageWithOpenAfterEnrollment.id).event;

            return {
                programStageIdToRedirectTo: firstStageWithOpenAfterEnrollment.id,
                eventId,
                pageToRedirectTo: PAGES.enrollmentEventEdit,
            };
        }

        // event will be autogenerated
        if (stagesArray.find(stage => stage.autoGenerateEvent && stage.id === firstStageWithOpenAfterEnrollment.id)) {
            const eventId = events.find(e => e.programStage === firstStageWithOpenAfterEnrollment.id).event;

            return {
                programStageIdToRedirectTo: firstStageWithOpenAfterEnrollment.id,
                eventId,
                pageToRedirectTo: PAGES.enrollmentEventEdit,
            };
        }

        return {
            programStageIdToRedirectTo: firstStageWithOpenAfterEnrollment.id,
            pageToRedirectTo: PAGES.enrollmentEventNew,
        };
    }

    return { pageToRedirectTo: PAGES.enrollmentDashboard };
};
