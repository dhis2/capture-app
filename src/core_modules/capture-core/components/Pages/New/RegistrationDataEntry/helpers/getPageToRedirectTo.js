// @flow
import { ProgramStage } from '../../../../../metaData';

export const PAGES = {
    enrollmentEventNew: 'enrollmentEventNew',
    enrollmentEventEdit: 'enrollmentEventEdit',
    enrollmentDashboard: 'enrollmentDashboard',
};
/**
 * An event can be
 *   - created during first stage registration
 *   - created and linked during first stage registration
 *   - autogenerated
 * When the event will be created redirect to enrollmentEventEdit
 * When the event will not be created redirect to enrollmentEventNew
 */
export const getPageToRedirectTo = (
    stages: Map<string, ProgramStage>,
    useFirstStageDuringRegistration: boolean,
    programStageIdLinkedEventToRedirectTo?: string,
) => {
    const stagesArray = [...stages.values()];
    const [firstStageWithOpenAfterEnrollment] = stagesArray.filter(({ openAfterEnrollment }) => openAfterEnrollment);

    const pageToRedirectTo = (() => {
        // event will be created and linked during first stage registration
        if (programStageIdLinkedEventToRedirectTo) {
            return PAGES.enrollmentEventEdit;
        }
        if (firstStageWithOpenAfterEnrollment) {
            // event will be created during first stage registration
            if (
                useFirstStageDuringRegistration
                && stagesArray[0].id === firstStageWithOpenAfterEnrollment.id
            ) {
                return PAGES.enrollmentEventEdit;
            }
            // event will be autogenerated
            if (
                stagesArray.find(stage => stage.autoGenerateEvent && stage.id === firstStageWithOpenAfterEnrollment.id)
            ) {
                return PAGES.enrollmentEventEdit;
            }
            return PAGES.enrollmentEventNew;
        }
        return PAGES.enrollmentDashboard;
    })();

    return {
        programStageIdToRedirectTo: programStageIdLinkedEventToRedirectTo || firstStageWithOpenAfterEnrollment?.id,
        pageToRedirectTo,
    };
};
