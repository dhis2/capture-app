// @flow
import { ProgramStage } from '../../../../metaData';
import { relatedStageActions } from '../../../WidgetRelatedStages';

/**
 * An event can be
 *   - created during first stage registration
 *   - created and linked during first stage registration
 *   - autogenerated
 * When the event will be created redirect to enrollmentEventEdit
 * When the event will not be created redirect to enrollmentEventNew
 */
export const getRedirectIds = ({
    stages,
    relatedStageLinkedEvent,
    linkMode,
    firstStageDuringRegistrationEvent,
    autoGenerateEvents,
}: {
    stages: Map<string, ProgramStage>,
    linkMode: ?string,
    relatedStageLinkedEvent: ?{
        programStage: string,
        event: string,
    },
    firstStageDuringRegistrationEvent: ?{
        programStage: string,
        event: string,
    },
    autoGenerateEvents: Array<{
        programStage: string,
        event: string,
        orgUnit: string,
    }>,
}): { programStageId?: string, eventId?: string } => {
    if (relatedStageLinkedEvent && linkMode === relatedStageActions.ENTER_DATA) {
        return { eventId: relatedStageLinkedEvent.event };
    }

    const [firstStageWithOpenAfterEnrollment] = [...stages.values()].filter(
        ({ openAfterEnrollment }) => openAfterEnrollment,
    );

    if (firstStageWithOpenAfterEnrollment) {
        // event will be created during first stage registration
        if (
            firstStageDuringRegistrationEvent &&
            firstStageDuringRegistrationEvent.programStage === firstStageWithOpenAfterEnrollment.id
        ) {
            return { eventId: firstStageDuringRegistrationEvent.event };
        }

        // event will be autogenerated
        const autoGenerateEvent = autoGenerateEvents.find(e => e.programStage === firstStageWithOpenAfterEnrollment.id);
        if (autoGenerateEvent) {
            return { eventId: autoGenerateEvent.event };
        }

        return { programStageId: firstStageWithOpenAfterEnrollment.id };
    }

    return {};
};
