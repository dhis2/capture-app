// @flow
import log from 'loglevel';
import { OptionSetHelper } from '../../helpers/OptionSetHelper';
import { typeKeys, typeof environmentTypes } from '../../constants';
import { variablePrefixes } from './variablePrefixes.const';
import { getStructureEvents } from './helpers';
import { normalizeRuleVariable } from '../../commonUtils/normalizeRuleVariable';
import { defaultValues } from './defaultValues';
import type { VariableServiceInput, ProgramRuleVariable, EventData, EventsData, EventsDataContainer, OptionSets, Enrollment, TEIValues, Constants } from './variableService.types';
import type { DataElement, DataElements, TrackedEntityAttribute, TrackedEntityAttributes, RuleVariable, RuleVariables, IDateUtils, OrgUnit } from '../../rulesEngine.types';
type SourceData = {
  executingEvent: ?EventData,
  eventsContainer: ?EventsDataContainer,
  dataElements: ?DataElements,
  trackedEntityAttributes: ?TrackedEntityAttributes,
  selectedEntity: ?TEIValues,
  selectedEnrollment: ?Enrollment,
  optionSets: OptionSets,
  selectedOrgUnit: OrgUnit,
};
const variableSourceTypesDataElementSpecific = {
  DATAELEMENT_CURRENT_EVENT: 'DATAELEMENT_CURRENT_EVENT',
  DATAELEMENT_NEWEST_EVENT_PROGRAM_STAGE: 'DATAELEMENT_NEWEST_EVENT_PROGRAM_STAGE',
  DATAELEMENT_NEWEST_EVENT_PROGRAM: 'DATAELEMENT_NEWEST_EVENT_PROGRAM',
  DATAELEMENT_PREVIOUS_EVENT: 'DATAELEMENT_PREVIOUS_EVENT'
};
const variableSourceTypesTrackedEntitySpecific = {
  TEI_ATTRIBUTE: 'TEI_ATTRIBUTE'
};
export const variableSourceTypes = {
  ...variableSourceTypesDataElementSpecific,
  ...variableSourceTypesTrackedEntitySpecific,
  CALCULATED_VALUE: 'CALCULATED_VALUE'
};
declare export class VariableService {
  static dateUtils: IDateUtils,
  environment: $Values<environmentTypes>,
  onProcessValue: (value: any, type: $Values<typeof typeKeys>) => any,
  mapSourceTypeToGetterFn: {
    [sourceType: string]: (programVariable: ProgramRuleVariable, sourceData: SourceData) => ?RuleVariable
  },
  defaultValues: any,
  structureEvents: (currentEvent?: EventData, events?: EventsData) => EventsDataContainer,
  constructor(onProcessValue: (value: any, type: $Values<typeof typeKeys>) => any, dateUtils: IDateUtils, environment: $Values<environmentTypes>): any,
  getVariables(arg0: VariableServiceInput): any,
  updateVariable(variableToAssign: string, data: any, variablesHash: RuleVariables): any,
  buildVariable(value: any, type: string, arg2: {
    variablePrefix: string,
    allValues?: ?Array<any>,
    variableEventDate?: ?string,
    useNameForOptionSet?: ?boolean,
  }): RuleVariable,
  preCheckDataElementSpecificSourceType(programVariable: ProgramRuleVariable, dataElements: ?DataElements): any,
  preCheckTrackedEntitySpecificSourceType(programVariable: ProgramRuleVariable, trackedEntityAttributes: ?TrackedEntityAttributes): any,
  postGetVariableForDataElementSpecificSourceType(programVariable: ProgramRuleVariable, dataElements: DataElements): any,
  getVariableValue(rawValue: any, valueType: string, dataElementId: string, useNameForOptionSet: ?boolean, dataElements: ?DataElements | ?TrackedEntityAttributes, optionSets: OptionSets): any,
  getVariableForCalculatedValue(programVariable: ProgramRuleVariable): ?RuleVariable,
  getVariableForSelectedEntityAttributes(programVariable: ProgramRuleVariable, sourceData: SourceData): ?RuleVariable,
  getVariableForCurrentEvent(programVariable: ProgramRuleVariable, sourceData: SourceData): ?RuleVariable,
  getVariableForNewestEventProgramStage(programVariable: ProgramRuleVariable, sourceData: SourceData): ?RuleVariable,
  getVariableForNewestEventProgram(programVariable: ProgramRuleVariable, sourceData: SourceData): ?RuleVariable,
  getVariableForPreviousEventProgram(programVariable: ProgramRuleVariable, sourceData: SourceData): ?RuleVariable,
  getVariableContainingAllValues(programVariable: ProgramRuleVariable, sourceData: SourceData, events: EventsData): ?RuleVariable,
  getContextVariables(sourceData: SourceData): RuleVariables,
  getEventContextVariables(executingEvent: ?EventData, eventsContainer: ?EventsDataContainer): any,
  getEnrollmentContextVariables(selectedEnrollment: ?Enrollment): any,
  getOrganisationContextVariables(orgUnit: OrgUnit): any,
  getConstantVariables(constants: ?Constants): any,
}